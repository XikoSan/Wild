# Generated by Django 3.1.3 on 2022-10-29 18:47

from django.db import migrations
from django.utils import timezone
import datetime

from state.tasks import finish_elections



def clear_banned_parties(apps, schema_editor):
    
    Player = apps.get_model("player", "Player")
    
    MembershipLog = apps.get_model("party", "MembershipLog")
    MembershipLog = apps.get_model("party", "MembershipLog")
    Party = apps.get_model("party", "Party")
    Primaries = apps.get_model("party", "Primaries")
    
    PeriodicTask = apps.get_model("django_celery_beat", "PeriodicTask")
    
    for player in Player.objects.filter(banned=True):        
        
        if player.party_post and player.party_post.party_lead:
            for member in Player.objects.filter(party=player.party):
            
                member.party = None
                member.party_post = None
                member.save()
                
                # Логировние: меянем запись об партийной активности
                MembershipLog.objects.filter(player=member, party=player.party, exit_dtime=None).update(exit_dtime=timezone.now())                    
                
            player.party.deleted = True
            player.party.save()
            
            # снимаем фоновые задачи праймериз этой партии
            if Primaries.objects.filter(party=player.party.pk, task__isnull=False).exists():
            
                prims = Primaries.objects.get(party=player.party.pk, task__isnull=False)
                # проверяем есть ли таска
                if prims.task is not None:
                    task_identificator = prims.task.id
                    # убираем таску у экземпляра модели
                    Primaries.objects.select_related('task').filter(pk=prims.id).update(task=None)
                    # удаляем таску
                    PeriodicTask.objects.filter(pk=task_identificator).delete()
                
                # проверяем есть ли таска
                if player.party.task is not None:
                    task_identificator = player.party.task.id
                    # убираем таску у экземпляра модели
                    Party.objects.select_related('task').filter(pk=player.party.id).update(task=None)
                    # удаляем таску
                    PeriodicTask.objects.filter(pk=task_identificator).delete()
                
            else:
                # проверяем есть ли таска
                if player.party.task is not None:
                    task_identificator = player.party.task.id
                    # убираем таску у экземпляра модели
                    Party.objects.select_related('task').filter(pk=player.party.id).update(task=None)
                    # удаляем таску
                    PeriodicTask.objects.filter(pk=task_identificator).delete()
        



class Migration(migrations.Migration):

    dependencies = [
        ('party', '0023_auto_20221022_0007'),
    ]

    operations = [
        migrations.RunPython(clear_banned_parties),
    ]
