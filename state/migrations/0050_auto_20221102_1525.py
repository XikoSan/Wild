# Generated by Django 3.1.3 on 2022-11-02 12:25

from django.db import migrations
from django.utils import timezone
import json

def crontask_remake(apps, schema_editor):

    Parliament = apps.get_model("state", "Parliament")
    ParliamentVoting = apps.get_model("state", "ParliamentVoting")
    
    PeriodicTask = apps.get_model("django_celery_beat", "PeriodicTask")
    
    CrontabSchedule = apps.get_model("django_celery_beat", "CrontabSchedule")
    
    
    parlaments = Parliament.objects.all()
    
    for parl in parlaments:
    
        foundation_day = parl.state.foundation_date.weekday()

        if foundation_day == 6:
            cron_day = 0
        else:
            cron_day = foundation_day + 1
            
    
        if parl.task is not None:

             if parl.task.crontab.day_of_week != cron_day:

        
                schedule = CrontabSchedule.objects.create(
                                                    minute=str(parl.state.foundation_date.minute),
                                                    hour=str(parl.state.foundation_date.hour),
                                                    day_of_week=cron_day,
                                                    day_of_month='*',
                                                    month_of_year='*',
                                                   )
                                                   
                parl.task.crontab = schedule
                
                parl.task.save()
        
        
        if ParliamentVoting.objects.filter(parliament=parl, task__isnull=False).exists():
            
            if cron_day == 6:
                cron_day = 0                
            else:
                cron_day += 1
                
            voting = ParliamentVoting.objects.get(parliament=parl, task__isnull=False) 
            
            if voting.task.crontab and voting.task.crontab.day_of_week != cron_day:
            
                schedule = CrontabSchedule.objects.create(
                                                        minute=str(parl.state.foundation_date.minute),
                                                        hour=str(parl.state.foundation_date.hour),
                                                        day_of_week=cron_day,
                                                        day_of_month='*',
                                                        month_of_year='*',
                                                       )
                                                                   
                voting.task.crontab = schedule
                
                voting.task.save()
        


class Migration(migrations.Migration):

    dependencies = [
        ('state', '0048_auto_20221028_2239'),
    ]

    operations = [
        migrations.RunPython(crontask_remake),
    ]
