# Generated by Django 3.2.18 on 2024-09-14 19:40

from django.db import migrations
import random
from datetime import datetime, timedelta
import pytz
from django.apps import apps
from django.utils import timezone


def prepare_plane_lists(player_pk, quality='common'):


    all_planes = {

        'nagger': ['base', 'black_gold', 'dreamflight'],

        'beluzzo': ['base'],

        'pretender': ['base',
                      'red', 'yellow', 'orange',
                      'green', 'dark_blue', 'light_blue',
                      'pink', 'violet', 'black',
                      'wood', 'gold'
                      ],

        'trickster': ['base',
                      'red', 'yellow', 'orange',
                      'green', 'dark_blue', 'light_blue',
                      'pink', 'violet', 'black',
                      'corny', 'redline',
                      'gold'
                      ],

        'smuggler': ['base',
                     'red', 'yellow', 'orange',
                     'green', 'dark_blue', 'light_blue',
                     'pink', 'violet', 'black',
                     'green_cam', 'blue_cam', 'desert_cam',
                     'gold'
                     ],

        'chaser': ['base',
                   'black'
                   ],

        'reaper': ['base',
                   'red', 'yellow', 'orange',
                   'green', 'dark_blue', 'light_blue',
                   'pink', 'violet', 'black',
                   'airball',
                   'green_cam', 'blue_cam', 'desert_cam',
                   'gold'],

        'cheater': ['base',
                    'red', 'yellow', 'orange',
                    'green', 'dark_blue', 'light_blue',
                    'pink', 'violet', 'black',
                    'gold',
                    'green_cam', 'blue_cam', 'desert_cam'],

        'carrier': ['base',
                    'red', 'yellow', 'orange',
                    'green', 'dark_blue', 'light_blue',
                    'pink', 'violet', 'black',
                    'gold',
                    'pobeda', ],

        'striker': ['base',
                    'red', 'yellow', 'orange',
                    'green', 'dark_blue', 'light_blue',
                    'pink', 'violet', 'black',
                    'green_white_cam',
                    'green_cam', 'blue_cam', 'desert_cam',
                    'gold'
                    ],

        'harrier': ['base',
                    'red', 'yellow', 'orange',
                    'green', 'dark_blue', 'light_blue',
                    'pink', 'violet', 'black',
                    'green_cam', 'blue_cam', 'desert_cam',
                    'gold'
                    ],

        'demolisher': ['base',
                       'red', 'yellow', 'orange',
                       'green', 'dark_blue', 'light_blue',
                       'pink', 'violet', 'black',
                       'standard', 'hexagon', 'white_cam',
                       'gold'
                       ],

        'observer': ['base',
                     'red', 'yellow', 'orange',
                     'green', 'dark_blue', 'light_blue',
                     'pink', 'violet', 'black', 'pobeda',
                     'gold', 'black_gold'
                     ],

        'sprinter': ['base',
                     'red', 'yellow', 'orange',
                     'green', 'dark_blue', 'light_blue',
                     'pink', 'violet', 'black',
                     'gold'
                     ],

        'hammer': ['base',
                   'red', 'yellow', 'orange',
                   'green', 'dark_blue', 'light_blue',
                   'pink', 'violet', 'black',
                   'green_cam', 'blue_cam', 'desert_cam',
                   'gold'
                   ],

        'sailor': ['base',
                   ],
    }


    Player = apps.get_model("player", "Player")
    Plane = apps.get_model("region", "Plane") 
        
    player = Player.objects.get(pk=player_pk)

    planes = Plane.objects.filter(player=player)
    

    common_colors = Plane.common_colors
    rare_colors = Plane.rare_colors
    epic_colors = Plane.gold_colors

    ret_list = []

    for plane in all_planes.keys():
        for color in all_planes[plane]:
            if plane == 'nagger' and color == 'base':
                continue

            if color in locals()[f'{quality}_colors']:
                if planes.filter(plane=plane, color=color).exists():
                    ret_list.append([plane, color, True])
                else:
                    ret_list.append([plane, color, False])

    return ret_list


# генератор открытия
def generate_rewards(player_pk, garant=False):

    Player = apps.get_model("player", "Player")
    
    Lootbox = apps.get_model("player", "Lootbox")
    GoldLog = apps.get_model("player", "GoldLog")
    Plane = apps.get_model("region", "Plane") 
    
        
    player = Player.objects.get(pk=player_pk)

    # определяем, что будет дропаться
    # определяем какая награда попадет в список
    if Lootbox.objects.filter(player=player, stock__gt=100).exists():
        reward = random.choices(['gold', 'common', 'rare', 'epic'], weights=[11, 55, 5, 1])
        nagrada = reward[0]
    else:
        reward = random.choices(['gold', 'common', 'rare', 'epic'], weights=[33, 55, 11, 1])
        nagrada = reward[0]

    if garant:
        nagrada = 'epic'

    if nagrada == 'gold':
        weights = [50, 3, 0.1, ]
        reward_val = random.choices([1000, 3000, 100000, ], weights=weights)[0]

    else:
        weights = []
        reward_list = prepare_plane_lists(player_pk, nagrada)

        for reward_plane in reward_list:
            if reward_plane[0] == 'beluzzo':
                weights.append(0.1)
            else:
                weights.append(1)

        reward_val = random.choices(reward_list, weights=weights)[0]

        if Plane.objects.filter(player=player, plane=reward_val[0], color=reward_val[1]).exists():

            if nagrada == 'epic':
                reward_val = 5000

            if nagrada == 'rare':
                reward_val = 1000

            if nagrada == 'common':
                reward_val = 500

            nagrada = 'gold'

    return reward_val, nagrada
    

def open_lootboxes(apps, schema_editor):

    Player = apps.get_model("player", "Player")
    Lootbox = apps.get_model("player", "Lootbox")
    
    GoldLog = apps.get_model("player", "GoldLog")
    PremLog = apps.get_model("player", "PremLog")
    WildpassLog = apps.get_model("player", "WildpassLog") 
    
    Plane = apps.get_model("region", "Plane")    
    LootboxPrize = apps.get_model("storage", "LootboxPrize")    
    
    for box in Lootbox.objects.filter(stock__gt=0):

    
        player = Player.objects.get(pk=box.player.pk)
        
        for box_count in range(box.stock):
        
            if LootboxPrize.objects.filter(player=player, deleted=False).exists():
                for prize in LootboxPrize.objects.filter(player=player, deleted=False):
                    if not Plane.objects.filter(player=player, plane=prize.plane, color=prize.color).exists():
                        plane = Plane(player=player, plane=prize.plane, color=prize.color)
                        plane.save()

                LootboxPrize.objects.filter(player=player, deleted=False).update(deleted=True)
            
            if box.garant_in == 0:
                reward, type = generate_rewards(player.pk, True)
                box.garant_in = 100

            else:
                reward, type = generate_rewards(player.pk)

            if type == 'epic':
                box.garant_in = 100

            else:
                box.garant_in -= 1

            if box.garant_in < 0:
                box.garant_in = 0

            if type == 'gold':
                player.gold += reward

                gold_log = GoldLog(player=player, gold=reward, activity_txt='bx_gld')
                gold_log.save()

                player.save()

            else:
                        
                prize = LootboxPrize(player=player, plane=reward[0], color=reward[1], date=timezone.now())
                prize.save()

        
        if LootboxPrize.objects.filter(player=player, deleted=False).exists():
            for prize in LootboxPrize.objects.filter(player=player, deleted=False):
                if not Plane.objects.filter(player=player, plane=prize.plane, color=prize.color).exists():
                    plane = Plane(player=player, plane=prize.plane, color=prize.color)
                    plane.save()

            LootboxPrize.objects.filter(player=player, deleted=False).update(deleted=True)
                
        box.stock = 0 
        box.save()


class Migration(migrations.Migration):

    dependencies = [
        ('storage', '0088_lootboxprize_date'),
    ]

    operations = [
        migrations.RunPython(open_lootboxes),
    ]
